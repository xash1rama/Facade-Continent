from apscheduler.schedulers.background import BackgroundScheduler
from fastapi import APIRouter, Form
from starlette.responses import JSONResponse
import asyncio
from .database.models import Contact, session, Information
from .schemas.schemas import User
import httpx

router = APIRouter()


class Dayli:
    site_forms = 0
    telegram_forms = 0

    def site_pus(self):
        self.site_forms += 1

    def site_reset(self):
        self.site_forms = 0


today = Dayli()
unique_users = set()

def get_api_token():
    token = session.query(Information).filter(Information.name == "–¢–æ–∫–µ–Ω –±–æ—Ç–∞").first()
    return token.data

def get_id_group():
    token = session.query(Information).filter(Information.name == "ID –¢–ì-–∞–¥–º–∏–Ω —á–∞—Ç–∞").first()
    return token.data

async def get_error_msg(msg, type, clnt):
    message_text = f"""‚ùó‚ùó–ü—Ä–æ—à—É –∑–∞–º–µ—Ç–∏—Ç—å‚ùó‚ùóÔ∏è

            –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞: 
            {type}
            **********

            –û—à–∏–±–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–ª–µ–¥—É—é—â–µ–º:
            {msg}

            –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–µ–∂–Ω–µ–º —Ä–µ–∂–∏–º–µ‚úÖ
                        """
    response = await clnt.post(
        f"https://api.telegram.org/bot{get_api_token()}/sendMessage",
        json={"chat_id": get_id_group(), "text": message_text},
    )

@router.post("/contact_form")
async def receive_contact_form(
    name: str = Form(...),
    phone: str = Form(...),
    questions: str = Form(...),
    comments: str = Form(None),
):
    try:
        today.site_pus()
        new = Contact(name=name, number_phone=phone, question=questions, comments=comments)
        session.add(new)
        session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
        message = (
            f"üîî–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ –Ω–∞ –û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—åüîî\n\n"
            f"üë©–ò–º—è: {name}\n"
            f"üì±–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"‚ùì–í–æ–ø—Ä–æ—Å: {questions}\n"
            f"üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{get_api_token()}/sendMessage",
                json={"chat_id": get_id_group(), "text": message},
            )

        return {"status": "success", "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."}
    except Exception as er:
        async with httpx.AsyncClient() as client:
            error_type = str(type(er).__name__)
            error_message = str(er)
            await get_error_msg(error_message,error_type,client)




# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.post("/trackUser")
async def track_user(user: User):
    try:
        unique_users.add(user.user_id)
        return JSONResponse(
            status_code=200, content={"message": "User  tracked successfully"}
        )
    except Exception as er:
        async with httpx.AsyncClient() as client:
            error_type = str(type(er).__name__)
            error_message = str(er)
            await get_error_msg(error_message, error_type, client)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
async def send_morning_report():
    try:
        unique_user_count = len(unique_users)
        two_st = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        one_st = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        more_st = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        aa = two_st
        if unique_user_count % 10 == 1:
            aa = one_st
        elif (unique_user_count % 10 == 0
              or unique_user_count % 10 == 5
              or unique_user_count % 10 == 6
              or unique_user_count % 10 == 7
              or unique_user_count % 10 == 8
              or unique_user_count % 10 == 9
        ):
            aa = more_st

        msg = f"""–î–æ–±—Ä–æe —É—Ç—Ä–æ!üòä
    üìä–í—Ä–µ–º—è 8:30 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä 
    üïï–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤ üïï
    
    üë®–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å–∞–π—Ç–∞üë®:
         {unique_user_count} {aa}
        
    üìÑ–ó–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞üìÑ: {today.site_forms} 
     """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{get_api_token()}/sendMessage",
                    json={"chat_id": get_id_group(), "text": msg},
                )
    except Exception as er:
        async with httpx.AsyncClient() as client:
            error_type = str(type(er).__name__)
            error_message = str(er)
            await get_error_msg(error_message, error_type, client)




async def send_evening_report():
    try:
        unique_user_count = len(unique_users)
        two_st = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        one_st = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        more_st = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        aa = two_st
        if unique_user_count % 10 == 1:
            aa = one_st
        elif (unique_user_count % 10 == 0
              or unique_user_count % 10 == 5
              or unique_user_count % 10 == 6
              or unique_user_count % 10 == 7
              or unique_user_count % 10 == 8
              or unique_user_count % 10 == 9
        ):
            aa = more_st

        msg = f"""–î–æ–±—Ä–æ–≥–æ –í–µ—á–µ—Ä–∞! üòä
    üìä–í—Ä–µ–º—è 20:30üìä 
    üïï–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–Ω–∏–µ 24 —á–∞—Å–∞ üïï
    
    üë®–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å–∞–π—Ç–∞üë®:
         {unique_user_count} {aa}
    
    üìÑ–ó–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞üìÑ: {today.site_forms} 
    
    
    üßπ–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—åüßπ
    """

        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{get_api_token()}/sendMessage",
                    json={"chat_id": get_id_group(), "text": msg},
                )

        unique_users.clear()
        today.site_reset()
    except Exception as er:
        async with httpx.AsyncClient() as client:
            error_type = str(type(er).__name__)
            error_message = str(er)
            await get_error_msg(error_message, error_type, client)



def schedule_reports():
    scheduler = BackgroundScheduler()
    scheduler.add_job(
        lambda: asyncio.run(send_morning_report()), "cron", hour=8, minute=30
    )  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:30
    scheduler.add_job(
        lambda: asyncio.run(send_evening_report()), "cron", hour=20, minute=30
    )  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:30
    scheduler.start()


schedule_reports()


